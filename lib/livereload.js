// Generated by CoffeeScript 1.3.3
(function() {
  var DEFAULT_CONFIG, Server, express, fs, http, path, url, watchr, ws, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  ws = require('websocket.io');

  http = require('http');

  express = require('express');

  url = require('url');

  watchr = require('watchr');

  _ = require('underscore');

  DEFAULT_CONFIG = {
    version: '7',
    port: 35729,
    delay: 50,
    exts: ['html', 'css', 'js', 'png', 'gif', 'jpg', 'php', 'php5', 'py', 'rb', 'erb', 'jade'],
    alias: {
      'styl': 'css'
    },
    exclusions: ['.git/', '.svn/', '.hg/'],
    applyJSLive: false,
    applyCSSLive: true
  };

  Server = (function() {

    function Server(config) {
      this.config = config;
      this.watch = __bind(this.watch, this);

      this.config = _.defaults(this.config || {}, DEFAULT_CONFIG);
      this.sockets = [];
    }

    Server.prototype.listen = function() {
      this.debug("LiveReload is waiting for browser to connect.");
      if (this.config.server) {
        this.config.server.listen(this.config.port);
        this.server = ws.attach(this.config.server);
      } else {
        this.server = ws.listen(this.config.port);
      }
      this.server.on('connection', this.onConnection.bind(this));
      return this.server.on('close', this.onClose.bind(this));
    };

    Server.prototype.onConnection = function(socket) {
      var _this = this;
      this.debug("Browser connected.");
      socket.send(JSON.stringify({
        command: 'hello',
        protocols: ['http://livereload.com/protocols/official-7'],
        serverName: 'node-livereload'
      }));
      socket.on('message', function(message) {
        return _this.debug("Browser URL: " + message);
      });
      socket.on('error', function(error) {
        return console.warn(error);
      });
      return this.sockets.push(socket);
    };

    Server.prototype.onClose = function(socket) {
      return this.debug("Browser disconnected.");
    };

    Server.prototype.watch = function(source) {
      var exclusions, exts,
        _this = this;
      exts = this.config.exts;
      exclusions = this.config.exclusions;
      return watchr.watch({
        path: source,
        ignoreHiddenFiles: true,
        listener: function(eventName, filePath, fileCurrentStat, filePreviousStat) {
          var exclusion, ext, _i, _j, _len, _len1, _results;
          for (_i = 0, _len = exclusions.length; _i < _len; _i++) {
            exclusion = exclusions[_i];
            if (filePath.match(exclusion)) {
              return;
            }
          }
          _results = [];
          for (_j = 0, _len1 = exts.length; _j < _len1; _j++) {
            ext = exts[_j];
            if (filePath.match("\." + ext + "$")) {
              _results.push(setTimeout(function() {
                return _this.reloadFile(filePath);
              }, _this.config.delay));
            }
          }
          return _results;
        }
      });
    };

    Server.prototype.reloadFile = function(filepath) {
      var aliasExt, data, ext, socket, _i, _len, _ref, _results;
      this.debug("Reload file: " + filepath);
      ext = path.extname(filepath).substr(1);
      aliasExt = this.config.alias[ext];
      if (aliasExt != null) {
        this.debug("and aliased to " + aliasExt);
        filepath = filepath.replace("." + ext, "." + aliasExt);
      }
      data = JSON.stringify({
        command: 'reload',
        path: filepath,
        liveJS: this.config.applyJSLive,
        liveCSS: this.config.applyCSSLive
      });
      _ref = this.sockets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        socket = _ref[_i];
        _results.push(socket.send(data));
      }
      return _results;
    };

    Server.prototype.reloadAll = function() {
      var data, socket, _i, _len, _ref, _results;
      this.debug("Reload all");
      data = JSON.stringify({
        command: 'reload',
        path: '*',
        liveJS: false,
        liveCSS: false
      });
      _ref = this.sockets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        socket = _ref[_i];
        _results.push(socket.send(data));
      }
      return _results;
    };

    Server.prototype.debug = function(str) {
      if (this.config.debug) {
        return console.log("" + str + "\n");
      }
    };

    return Server;

  })();

  exports.DEFAULT_CONFIG = DEFAULT_CONFIG;

  exports.createServer = function(config) {
    var app, server;
    if (config == null) {
      config = {};
    }
    server = new Server(config);
    if (config.server == null) {
      app = express();
      app.use(express["static"]("" + __dirname + "/../ext"));
      app.get('/livereload.js', function(req, res) {
        return res.sendfile("" + __dirname + "/../ext/livereload.js");
      });
      app.post('/reload', function(req, res) {
        var _this = this;
        setTimeout(function() {
          return server.reloadAll();
        }, server.config.delay);
        return res.send("");
      });
      config.server = http.createServer(app);
    }
    server.listen();
    return server;
  };

}).call(this);
